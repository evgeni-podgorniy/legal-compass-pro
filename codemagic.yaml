
workflows:
  android-build:
    name: Build Android APK
    max_build_duration: 60
    environment:
      vars:
        JAVA_VERSION: 17
      java: 17
    scripts:
      - echo "Starting build process"
      - echo "Checking current directory"
      - pwd
      - ls -la
      - echo "Verifying Node and NPM"
      - node --version
      - npm --version
      - echo "Installing project dependencies"
      - npm ci
      - echo "Building web application"
      - npm run build
      - echo "Adding Android platform if not present"
      - |
        if [ ! -d "android" ]; then
          echo "Android platform not found, creating it"
          npx cap add android
        fi
      - echo "Syncing web build with Android platform"
      - npx cap sync android
      - echo "Checking Android directory structure after sync"
      - ls -la android
      - echo "Checking for build.gradle and settings.gradle"
      - ls -la android/app
      - |
        # Ensure we're in the Android directory
        cd android
        
        # Create a toolchain.gradle file specifically for Java compatibility
        echo "Creating toolchain.gradle with Java 17 settings"
        cat > toolchain.gradle << 'EOL'
        ext {
            compileSdkVersion = 33
            targetSdkVersion = 33
            minSdkVersion = 22
            buildToolsVersion = '33.0.2'
            javaVersion = JavaVersion.VERSION_17
        }

        subprojects {
            afterEvaluate { project ->
                if (project.hasProperty('android')) {
                    android {
                        compileSdkVersion rootProject.ext.compileSdkVersion
                        buildToolsVersion rootProject.ext.buildToolsVersion
                        
                        defaultConfig {
                            minSdkVersion rootProject.ext.minSdkVersion
                            targetSdkVersion rootProject.ext.targetSdkVersion
                        }
                        
                        compileOptions {
                            sourceCompatibility rootProject.ext.javaVersion
                            targetCompatibility rootProject.ext.javaVersion
                        }
                    }
                }
                
                if (project.hasProperty('android') || project.hasProperty('java')) {
                    tasks.withType(JavaCompile) {
                        options.compilerArgs << '-Xlint:none'
                        sourceCompatibility = rootProject.ext.javaVersion
                        targetCompatibility = rootProject.ext.javaVersion
                    }
                }
            }
        }
        EOL
        
        # Apply the toolchain to the root build.gradle file
        echo "Applying toolchain to root build.gradle"
        if [ -f "build.gradle" ]; then
            # Check if the toolchain is already applied
            if ! grep -q "apply from: 'toolchain.gradle'" "build.gradle"; then
                # Add the apply statement to the top of the file
                sed -i '1s/^/apply from: "toolchain.gradle"\n\n/' build.gradle
            fi
        fi
        
        # Direct fixes to individual build.gradle files
        echo "Directly modifying capacitor-android/build.gradle"
        if [ -f "capacitor-android/build.gradle" ]; then
            # Replace any Java version with 17
            sed -i 's/sourceCompatibility .*/sourceCompatibility JavaVersion.VERSION_17/g' capacitor-android/build.gradle
            sed -i 's/targetCompatibility .*/targetCompatibility JavaVersion.VERSION_17/g' capacitor-android/build.gradle
            
            # Add compileOptions block if it doesn't exist
            if ! grep -q "compileOptions" "capacitor-android/build.gradle"; then
                sed -i '/android {/a\    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_17\n        targetCompatibility JavaVersion.VERSION_17\n    }' capacitor-android/build.gradle
            fi
        fi
        
        echo "Directly modifying capacitor-cordova-android-plugins/build.gradle"
        if [ -f "capacitor-cordova-android-plugins/build.gradle" ]; then
            # Replace any Java version with 17
            sed -i 's/sourceCompatibility .*/sourceCompatibility JavaVersion.VERSION_17/g' capacitor-cordova-android-plugins/build.gradle
            sed -i 's/targetCompatibility .*/targetCompatibility JavaVersion.VERSION_17/g' capacitor-cordova-android-plugins/build.gradle
            
            # Add compileOptions block if it doesn't exist
            if ! grep -q "compileOptions" "capacitor-cordova-android-plugins/build.gradle"; then
                sed -i '/android {/a\    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_17\n        targetCompatibility JavaVersion.VERSION_17\n    }' capacitor-cordova-android-plugins/build.gradle
            fi
        fi
        
        echo "Directly modifying app/build.gradle"
        if [ -f "app/build.gradle" ]; then
            # Replace any Java version with 17
            sed -i 's/sourceCompatibility .*/sourceCompatibility JavaVersion.VERSION_17/g' app/build.gradle
            sed -i 's/targetCompatibility .*/targetCompatibility JavaVersion.VERSION_17/g' app/build.gradle
            
            # Add compileOptions block if it doesn't exist
            if ! grep -q "compileOptions" "app/build.gradle"; then
                sed -i '/android {/a\    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_17\n        targetCompatibility JavaVersion.VERSION_17\n    }' app/build.gradle
            fi
        fi
        
        echo "Creating gradle.properties with Java compatibility settings"
        cat > gradle.properties << 'EOL'
        org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8 -Duser.language=en
        android.useAndroidX=true
        android.enableJetifier=true
        android.defaults.buildfeatures.buildconfig=true
        org.gradle.java.home=${JAVA_HOME}
        EOL
        
        # Ensure Gradle wrapper exists and is executable
        if [ ! -f "./gradlew" ]; then
            echo "Gradle wrapper not found, attempting to create"
            gradle wrapper
            if [ ! -f "./gradlew" ]; then
                echo "Failed to create wrapper with gradle command, trying manual approach"
                mkdir -p gradle/wrapper
                echo "distributionUrl=https\\://services.gradle.org/distributions/gradle-7.6-bin.zip" > gradle/wrapper/gradle-wrapper.properties
                echo "distributionBase=GRADLE_USER_HOME" >> gradle/wrapper/gradle-wrapper.properties
                echo "distributionPath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
                echo "zipStorePath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
                echo "zipStoreBase=GRADLE_USER_HOME" >> gradle/wrapper/gradle-wrapper.properties
                
                # Create a simple gradlew script
                echo '#!/usr/bin/env sh' > gradlew
                echo 'exec gradle "$@"' >> gradlew
                chmod +x gradlew
            fi
        else
            chmod +x ./gradlew
        fi
        
        # Clean and build
        echo "Running Gradle clean"
        ./gradlew clean
        
        echo "Building Android Debug APK"
        ./gradlew assembleDebug
    artifacts:
      - android/app/build/outputs/**/*.apk
