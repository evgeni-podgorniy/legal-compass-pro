
workflows:
  android-build:
    name: Build Android APK
    max_build_duration: 60
    environment:
      vars:
        JAVA_VERSION: 17
      java: 17
    scripts:
      - echo "Starting build process"
      - echo "Checking current directory"
      - pwd
      - ls -la
      - echo "Verifying Node and NPM"
      - node --version
      - npm --version
      - echo "Installing project dependencies"
      - npm ci
      - echo "Building web application"
      - npm run build
      - echo "Adding Android platform if not present"
      - |
        if [ ! -d "android" ]; then
          echo "Android platform not found, creating it"
          npx cap add android
        fi
      - echo "Syncing web build with Android platform"
      - npx cap sync android
      - echo "Checking Android directory structure after sync"
      - ls -la android
      - echo "Checking for build.gradle and settings.gradle"
      - ls -la android/app
      - |
        # Ensure we're in the Android directory
        cd android
        
        # Create a JVM specific gradle.properties to override any conflicting settings
        echo "Creating JVM-specific gradle.properties"
        cat > gradle.properties << 'EOL'
        org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
        android.useAndroidX=true
        android.enableJetifier=true
        android.defaults.buildfeatures.buildconfig=true
        org.gradle.java.home=${JAVA_HOME}
        # Explicitly set Java version
        java.toolchain.version=17
        EOL
        
        # Create a specialized capacitor fix gradle file
        echo "Creating capacitor Java fix"
        cat > capacitor-java-fix.gradle << 'EOL'
        allprojects {
            tasks.withType(JavaCompile) {
                sourceCompatibility = JavaVersion.VERSION_17
                targetCompatibility = JavaVersion.VERSION_17
            }
        }

        subprojects {
            afterEvaluate { project ->
                if (project.hasProperty('android')) {
                    android {
                        compileOptions {
                            sourceCompatibility JavaVersion.VERSION_17
                            targetCompatibility JavaVersion.VERSION_17
                        }
                    }
                }
            }
        }
        EOL
        
        # Apply the fix to the root build.gradle
        echo "Applying fixes to root build.gradle"
        if [ -f "build.gradle" ]; then
            # Add the apply statement to the top of the file if not already there
            if ! grep -q "apply from: 'capacitor-java-fix.gradle'" "build.gradle"; then
                sed -i '1s/^/apply from: "capacitor-java-fix.gradle"\n\n/' build.gradle
            fi
        fi
        
        # Direct fix for capacitor-android's build.gradle
        echo "Applying direct fixes to capacitor-android/build.gradle"
        if [ -f "capacitor-android/build.gradle" ]; then
            # Update compileOptions block
            if grep -q "compileOptions" "capacitor-android/build.gradle"; then
                # Update existing compileOptions block
                sed -i 's/sourceCompatibility .*/sourceCompatibility JavaVersion.VERSION_17/g' capacitor-android/build.gradle
                sed -i 's/targetCompatibility .*/targetCompatibility JavaVersion.VERSION_17/g' capacitor-android/build.gradle
            else
                # Add compileOptions block
                sed -i '/android {/a\    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_17\n        targetCompatibility JavaVersion.VERSION_17\n    }' capacitor-android/build.gradle
            fi
            
            # Ensure no other Java version settings exist
            sed -i 's/sourceCompatibility = .*/sourceCompatibility = JavaVersion.VERSION_17/g' capacitor-android/build.gradle
            sed -i 's/targetCompatibility = .*/targetCompatibility = JavaVersion.VERSION_17/g' capacitor-android/build.gradle
        fi
        
        # Apply fixes to capacitor-cordova-android-plugins
        echo "Applying fixes to capacitor-cordova-android-plugins/build.gradle"
        if [ -f "capacitor-cordova-android-plugins/build.gradle" ]; then
            # Update compileOptions block
            if grep -q "compileOptions" "capacitor-cordova-android-plugins/build.gradle"; then
                sed -i 's/sourceCompatibility .*/sourceCompatibility JavaVersion.VERSION_17/g' capacitor-cordova-android-plugins/build.gradle
                sed -i 's/targetCompatibility .*/targetCompatibility JavaVersion.VERSION_17/g' capacitor-cordova-android-plugins/build.gradle
            else
                sed -i '/android {/a\    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_17\n        targetCompatibility JavaVersion.VERSION_17\n    }' capacitor-cordova-android-plugins/build.gradle
            fi
        fi
        
        # Apply fixes to app/build.gradle
        echo "Applying fixes to app/build.gradle"
        if [ -f "app/build.gradle" ]; then
            # Update compileOptions block
            if grep -q "compileOptions" "app/build.gradle"; then
                sed -i 's/sourceCompatibility .*/sourceCompatibility JavaVersion.VERSION_17/g' app/build.gradle
                sed -i 's/targetCompatibility .*/targetCompatibility JavaVersion.VERSION_17/g' app/build.gradle
            else
                sed -i '/android {/a\    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_17\n        targetCompatibility JavaVersion.VERSION_17\n    }' app/build.gradle
            fi
        fi
                
        # Create a system-level gradle.properties file as a fallback
        echo "Creating system-level gradle.properties"
        mkdir -p $HOME/.gradle
        cat > $HOME/.gradle/gradle.properties << 'EOL'
        org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
        java.toolchain.version=17
        EOL
        
        # Ensure Gradle wrapper exists and is executable
        if [ ! -f "./gradlew" ]; then
            echo "Gradle wrapper not found, attempting to create"
            gradle wrapper --gradle-version=7.6 --distribution-type=bin
            if [ ! -f "./gradlew" ]; then
                echo "Failed to create wrapper with gradle command, trying manual approach"
                mkdir -p gradle/wrapper
                echo "distributionUrl=https\\://services.gradle.org/distributions/gradle-7.6-bin.zip" > gradle/wrapper/gradle-wrapper.properties
                echo "distributionBase=GRADLE_USER_HOME" >> gradle/wrapper/gradle-wrapper.properties
                echo "distributionPath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
                echo "zipStorePath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
                echo "zipStoreBase=GRADLE_USER_HOME" >> gradle/wrapper/gradle-wrapper.properties
                
                # Create a simple gradlew script
                echo '#!/usr/bin/env sh' > gradlew
                echo 'exec gradle "$@"' >> gradlew
                chmod +x gradlew
            fi
        else
            chmod +x ./gradlew
        fi
        
        # Clean the build before starting fresh
        echo "Running Gradle clean"
        ./gradlew clean --refresh-dependencies
        
        echo "Building Android Debug APK"
        ./gradlew assembleDebug
    artifacts:
      - android/app/build/outputs/**/*.apk
