
workflows:
  android-build:
    name: Build Android APK
    max_build_duration: 60
    environment:
      vars:
        JAVA_VERSION: 17
      java: 17
    scripts:
      - echo "Starting build process"
      - echo "Checking current directory"
      - pwd
      - ls -la
      - echo "Verifying Node and NPM"
      - node --version
      - npm --version
      - echo "Installing project dependencies"
      - npm ci
      - echo "Building web application"
      - npm run build
      - echo "Adding Android platform if not present"
      - |
        if [ ! -d "android" ]; then
          echo "Android platform not found, creating it"
          npx cap add android
        fi
      - echo "Syncing web build with Android platform"
      - npx cap sync android
      - echo "Checking Android directory structure after sync"
      - ls -la android
      - echo "Checking for build.gradle and settings.gradle"
      - ls -la android/app
      - |
        # Ensure we're in the Android directory
        cd android
        
        # Create a file that fixes Java compatibility for the Capacitor plugin
        echo "Creating a fix for Capacitor's Java compatibility"
        cat > capacitor-java-fix.gradle << 'EOL'
        allprojects {
            tasks.withType(JavaCompile) {
                sourceCompatibility = JavaVersion.VERSION_17
                targetCompatibility = JavaVersion.VERSION_17
                options.compilerArgs.add('--release')
                options.compilerArgs.add('17')
                options.fork = true
                options.forkOptions.executable = 'javac'
                options.forkOptions.jvmArgs = ['-Xlint:none']
            }
        }
        EOL
        
        # Apply the fix to the Capacitor Android module
        if [ -f "./capacitor-android/build.gradle" ]; then
          echo "Applying Java fix to capacitor-android/build.gradle"
          echo "apply from: '../capacitor-java-fix.gradle'" >> ./capacitor-android/build.gradle
          
          # Also directly modify the capacitor-android/build.gradle file
          echo "Directly modifying capacitor-android/build.gradle Java compatibility settings"
          awk '/android {/{ print; print "    compileOptions {"; print "        sourceCompatibility JavaVersion.VERSION_17"; print "        targetCompatibility JavaVersion.VERSION_17"; print "    }"; next}1' ./capacitor-android/build.gradle > ./capacitor-android/build.gradle.tmp
          mv ./capacitor-android/build.gradle.tmp ./capacitor-android/build.gradle
        fi
        
        # Also apply to capacitor-cordova-android-plugins if it exists
        if [ -f "./capacitor-cordova-android-plugins/build.gradle" ]; then
          echo "Applying Java fix to capacitor-cordova-android-plugins/build.gradle"
          echo "apply from: '../capacitor-java-fix.gradle'" >> ./capacitor-cordova-android-plugins/build.gradle
          
          # Also directly modify this file
          echo "Directly modifying capacitor-cordova-android-plugins/build.gradle Java compatibility settings"
          awk '/android {/{ print; print "    compileOptions {"; print "        sourceCompatibility JavaVersion.VERSION_17"; print "        targetCompatibility JavaVersion.VERSION_17"; print "    }"; next}1' ./capacitor-cordova-android-plugins/build.gradle > ./capacitor-cordova-android-plugins/build.gradle.tmp
          mv ./capacitor-cordova-android-plugins/build.gradle.tmp ./capacitor-cordova-android-plugins/build.gradle
        fi
        
        # Fix Java compatibility issue by modifying build.gradle files
        echo "Setting Java compatibility version to fix 'invalid source release: 21' error"
        if [ -f "./app/build.gradle" ]; then
          echo "Updating app/build.gradle with Java compatibility settings"
          # Check if compileOptions block exists and add/modify as needed
          if grep -q "compileOptions" "./app/build.gradle"; then
            sed -i 's/sourceCompatibility .*/sourceCompatibility JavaVersion.VERSION_17/g' ./app/build.gradle
            sed -i 's/targetCompatibility .*/targetCompatibility JavaVersion.VERSION_17/g' ./app/build.gradle
          else
            # Add compileOptions block if it doesn't exist
            awk '/android {/{ print; print "    compileOptions {"; print "        sourceCompatibility JavaVersion.VERSION_17"; print "        targetCompatibility JavaVersion.VERSION_17"; print "    }"; next}1' ./app/build.gradle > ./app/build.gradle.tmp
            mv ./app/build.gradle.tmp ./app/build.gradle
          fi
        fi
        
        # Also check the root build.gradle if it exists
        if [ -f "./build.gradle" ]; then
          echo "Updating root build.gradle with Java compatibility settings"
          # Create a temporary file to check if already has compileOptions
          if grep -q "allprojects" "./build.gradle"; then
            # Use awk to add Java compatibility settings
            awk '/allprojects {/{ print; print "    tasks.withType(JavaCompile) {"; print "        options.compilerArgs << \"-Xlint:unchecked\" << \"-Xlint:deprecation\""; print "        sourceCompatibility = JavaVersion.VERSION_17"; print "        targetCompatibility = JavaVersion.VERSION_17"; print "    }"; next}1' ./build.gradle > ./build.gradle.tmp
            mv ./build.gradle.tmp ./build.gradle
          else
            # If allprojects block doesn't exist, add it
            echo -e "\nallprojects {\n    tasks.withType(JavaCompile) {\n        options.compilerArgs << \"-Xlint:unchecked\" << \"-Xlint:deprecation\"\n        sourceCompatibility = JavaVersion.VERSION_17\n        targetCompatibility = JavaVersion.VERSION_17\n    }\n}" >> ./build.gradle
          fi
        fi
        
        # Check if gradle.properties exists and add Java version there too
        if [ -f "./gradle.properties" ]; then
          echo "Updating gradle.properties with Java compatibility settings"
          echo "org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8" >> ./gradle.properties
          echo "android.useAndroidX=true" >> ./gradle.properties
          echo "android.enableJetifier=true" >> ./gradle.properties
          echo "org.gradle.java.home=/Applications/Android\\ Studio.app/Contents/jbr/Contents/Home" >> ./gradle.properties
        else
          echo "Creating gradle.properties with Java compatibility settings"
          echo "org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8" > ./gradle.properties
          echo "android.useAndroidX=true" >> ./gradle.properties
          echo "android.enableJetifier=true" >> ./gradle.properties
          echo "org.gradle.java.home=/Applications/Android\\ Studio.app/Contents/jbr/Contents/Home" >> ./gradle.properties
        fi
        
        if [ ! -f "./gradlew" ]; then
          echo "Gradle wrapper not found in Android project"
          # Check if we have basic Gradle files
          if [ ! -f "./settings.gradle" ]; then
            echo "ERROR: No settings.gradle found. Capacitor sync didn't create a proper Android project."
            echo "Showing android directory contents:"
            ls -la
            echo "Trying to force recreate Android platform"
            cd ..
            rm -rf android
            npx cap add android
            npx cap sync android
            cd android
          fi
          
          # Now try to create the Gradle wrapper if it still doesn't exist
          if [ ! -f "./gradlew" ]; then
            echo "Attempting to generate Gradle wrapper manually"
            # Check if Gradle is available
            which gradle
            if [ $? -eq 0 ]; then
              echo "Using gradle command to create wrapper"
              gradle wrapper
            else
              echo "Gradle not found, using Gradle embedded in Android Studio"
              # Alternative approach if gradle command isn't available
              ./gradlew wrapper
            fi
            
            # Verify if wrapper was created
            if [ ! -f "./gradlew" ]; then
              echo "CRITICAL ERROR: Failed to create Gradle wrapper"
              echo "Current directory contents:"
              ls -la
              exit 1
            fi
          fi
          
          echo "Making Gradle wrapper executable"
          chmod +x ./gradlew
        else
          echo "Gradle wrapper found, making it executable"
          chmod +x ./gradlew
        fi
        
        # Verify Gradle wrapper works
        echo "Testing Gradle wrapper"
        ./gradlew -v
        
        # List available tasks
        echo "Listing available Gradle tasks"
        ./gradlew tasks --all || echo "Warning: Failed to list tasks, but continuing"
        
        # Build the APK
        echo "Building Android Debug APK"
        ./gradlew assembleDebug
    artifacts:
      - android/app/build/outputs/**/*.apk
